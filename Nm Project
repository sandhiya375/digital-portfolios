# app.py
import os
import streamlit as st
import pandas as pd
import plotly.express as px
from dotenv import load_dotenv
from ibm_watsonx_ai.foundation_models import Model

# -----------------------------
# Load environment variables
# -----------------------------
load_dotenv()
API_KEY = os.getenv("WATSONX_APIKEY")
PROJECT_ID = os.getenv("WATSONX_PROJECT_ID")
URL = os.getenv("WATSONX_URL")

if not API_KEY or not PROJECT_ID or not URL:
    st.error("‚ùå Missing Watsonx credentials in .env file!")
    st.stop()

# -----------------------------
# Setup IBM Watsonx model
# -----------------------------
model = Model(
    model_id="ibm/granite-13b-instruct-v2",  # Supported model
    credentials={"apikey": API_KEY, "url": URL},
    project_id=PROJECT_ID
)

# -----------------------------
# Initialize session storage
# -----------------------------
if "patients" not in st.session_state:
    st.session_state.patients = pd.DataFrame(
        columns=["Name", "Age", "Gender", "Condition", "Treatment"]
    )

# -----------------------------
# Streamlit UI
# -----------------------------
st.set_page_config(page_title="AI Health Assistant", layout="wide")
st.title("ü©∫ AI Health Assistant Dashboard")
st.markdown(
    "This dashboard uses *Watsonx AI* to generate personalized treatment plans."
)

# Input fields
st.subheader("üßë‚Äç‚öï Patient Profile")
name = st.text_input("Name", "Rekha")
age = st.number_input("Age", min_value=1, max_value=120, value=22)
gender = st.selectbox("Gender", ["Male", "Female", "Other"], index=1)
history = st.text_area("Medical History", "None")
meds = st.text_area("Current Medications", "None")
allergies = st.text_area("Allergies", "None")
condition = st.text_input("Medical Condition", "Mouth Ulcer")

# Button to generate treatment
if st.button("Generate Treatment Plan"):
    prompt = f"""
Patient Profile:
Name: {name}, Age: {age}, Gender: {gender}
Medical History: {history}
Current Medications: {meds}
Allergies: {allergies}
Condition: {condition}

Suggest a personalized treatment plan in simple steps.
"""
    # Generate treatment safely
    response = model.generate(prompt=prompt)

    # Safe extraction for different SDK versions
    if "generated_text" in response["results"][0]:
        suggestion = response["results"][0]["generated_text"]
    else:
        suggestion = response["results"][0].get("content", [{}])[0].get(
            "text", "No text generated"
        )

    # Store patient record
    new_row = {
        "Name": name,
        "Age": age,
        "Gender": gender,
        "Condition": condition,
        "Treatment": suggestion
    }
    st.session_state.patients = pd.concat(
        [st.session_state.patients, pd.DataFrame([new_row])],
        ignore_index=True
    )

    # Display treatment plan
    st.markdown("### ‚úÖ Personalized Treatment Plan")
    st.text(suggestion)

# -----------------------------
# Analytics
# -----------------------------
if not st.session_state.patients.empty:
    st.markdown("### üìä Patient Condition Analytics")
    df = st.session_state.patients

    # Most common conditions
    freq = df["Condition"].value_counts().reset_index()
    freq.columns = ["Condition", "Count"]
    fig = px.bar(freq, x="Condition", y="Count", title="Most Common Conditions Reported")
    st.plotly_chart(fig)

    st.markdown("### üîé Recent Patient Records")
    st.dataframe(df.tail(5))
